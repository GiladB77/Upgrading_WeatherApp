{"version":3,"sources":["Day.jsx","Display.jsx","Navbar.jsx","App.jsx","index.js"],"names":["Day","className","src","alt","Display","props","weatherData","location","temperature","country","id","moment","format","Navbar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","Number","longitude","data","inputDate","change","setState","event","preventDefault","API_KEY","Axios","get","then","res","console","log","city","name","Math","round","list","main","temp","latLon","coord","lat","lon","newCoords","currentTempEl","document","getElementById","weatherForecastEl","otherDayForcast","daily","forEach","day","idx","innerHTML","dt","weather","icon","night","description","navigator","geolocation","getCurrentPosition","position","result","feels_like","this","React","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2bd90822.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css';\r\n\r\nfunction Day() {\r\n    return (\r\n        <div className=\"weather-forecast\">\r\n            <div className=\"weather-forecast-item\">\r\n                <div className=\"day\">Sunday</div>\r\n                <img src=\"http://openweathermap.org/img/wn/10d@2x.png\" alt=\"weather icon\" className=\"w-icon\"></img>\r\n                <div className=\"temp\">Day - 0°C</div>\r\n                <div className=\"temp\">Night - 0°C</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Day\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport Day from './Day'\r\n\r\nfunction Display(props) {\r\n\r\n  const { location, temperature, country,\r\n  } = props.weatherData;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"others\" id=\"current-weather-items\">\r\n          <div className=\"title\">\r\n            <h1>Weather App</h1>\r\n          </div>\r\n          <div className=\"Location\">\r\n            Location: {location}\r\n          </div>\r\n          <div>\r\n          Today's temperature: {temperature}\r\n          </div>\r\n          <div className=\"date\">\r\n            Date: {moment().format(\"MMM Do YY\")}\r\n          </div>\r\n        </div>\r\n        <div className=\"data-container\">\r\n          <div className=\"time\" id=\"time\">\r\n            <span id=\"am-pm\"></span>\r\n          </div>\r\n          <div className=\"place-container\">\r\n            <div className=\"time-zone\" id=\"time-zone\"></div>\r\n            <h3>{country} / {location}</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"future-forecast\">\r\n        <div className=\"today\" id=\"current-temp\">\r\n          <div className=\"other\">\r\n            <div className=\"day\">Sunday</div>\r\n            <img src=\"http://openweathermap.org/img/wn/10d@2x.png\" alt=\"weather icon\" className=\"w-icon\"></img>\r\n            <div className=\"temp\">Day - 0°C</div>\r\n            <div className=\"temp\">Night - 0°C</div>\r\n            <div>Description</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"weather-forecast\" id=\"weather-forecast\">\r\n        <Day/>\r\n        <Day/>\r\n        <Day/>\r\n        <Day/>\r\n        <Day/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Display;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"container\">\r\n                <form className=\"region\" onSubmit={(e) => props.changeWeather(e)}>\r\n                    <input className=\"regioninput\" placeholder=\"Enter location in English\"\r\n                        onChange={(e) => props.changeRegion(e.target.value)} />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react'\nimport './App.css';\nimport Display from './Display'\nimport Axios from 'axios'\nimport Navbar from './Navbar'\nimport moment from 'moment'\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: Number,\n      longitude: Number\n    },\n    data: {},\n    inputDate: \"\"\n  }\n\n  componentDidMount() {\n\n    navigator.geolocation.getCurrentPosition((position) => {\n      let newCoords = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      }\n      this.setState({ coords: newCoords });\n      const API_KEY = 'a3dfc64f016495e5f5c25ba2eabe80cf'\n\n      Axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&appid=${API_KEY}`)\n        .then(result => {\n          console.log(result)\n\n          let weatherData = {\n            location: result.data.city.name,\n            temperature: Math.round(result.data.list[0].main.feels_like / 10) + \"°\",\n            country: result.data.city.country,\n          }\n          this.setState({ data: weatherData });\n        })\n\n      Axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&exclude={daily}&appid=${API_KEY}`)\n        .then(res => {\n          console.log(res);\n          let currentTempEl = document.getElementById('current-temp');\n          let weatherForecastEl = document.getElementById('weather-forecast');\n\n          let otherDayForcast = \"\";\n          res.data.daily.forEach((day, idx) => {\n            if (idx === 0) {\n              currentTempEl.innerHTML = `\n                  <div class=\"other\">\n                  <div class=\"day\">${moment(day.dt * 1000).format('dddd')}</div>\n                  <img src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\" alt=\"weather icon\" class=\"w-icon\"/>\n                  <div class=\"temp\">Day - ${Math.round(day.temp.day / 10)}&#176;C</div>\n                  <div class=\"temp\">Night - ${Math.round(day.temp.night / 10)}&#176;C</div>\n                  <div class=\"temp\">Description - ${day.weather[0].description}</div>\n              </div>`\n            } else if (idx < 7) {\n              otherDayForcast += ` \n                       <div class=\"weather-forecast-item\">\n                  <div class=\"day\">${moment(day.dt * 1000).format('dddd')}</div>\n                       <img src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\" alt=\"weather icon\" class=\"w-icon\"/>\n                       <div class=\"temp\">Day - ${Math.round(day.temp.day / 10)}&#176;C</div>\n                       <div class=\"temp\">Night - ${Math.round(day.temp.night / 10)}&#176;C</div>\n                       <div class=\"temp\">Description - ${day.weather[0].description}</div>\n                   </div>\n                  `\n            }\n          })\n          weatherForecastEl.innerHTML = otherDayForcast;\n        })\n    })\n  }\n  change = (value) => {\n    this.setState({ inputDate: value })\n  }\n\n  changeWeather = (event) => {\n    event.preventDefault();\n    const API_KEY = 'a3dfc64f016495e5f5c25ba2eabe80cf'\n\n    \n\n    Axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.inputDate}&exclude={daily}&appid=${API_KEY}`)\n      .then(res => {\n        console.log(res);\n\n        let weatherData = {\n          location: res.data.city.name,\n          temperature: Math.round(res.data.list[0].main.temp / 10) + \"°\",\n          country: res.data.city.country,\n        }\n        this.setState({ data: weatherData });\n\n        let latLon = {\n          latitude: res.data.city.coord.lat,\n          longitude: res.data.city.coord.lon\n        }\n        this.setState({ newCoords: latLon });\n        \n\n        Axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.newCoords.latitude}&lon=${this.state.newCoords.longitude}&exclude={daily}&appid=${API_KEY}`)\n          .then(res => {\n            console.log(res);\n            let currentTempEl = document.getElementById('current-temp');\n            let weatherForecastEl = document.getElementById('weather-forecast');\n\n            let otherDayForcast = \"\";\n            res.data.daily.forEach((day, idx) => {\n              if (idx === 0) {\n                currentTempEl.innerHTML = `\n                    <div class=\"other\">\n                    <div class=\"day\">${moment(day.dt * 1000).format('dddd')}</div>\n                    <img src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\" alt=\"weather icon\" class=\"w-icon\"/>\n                    <div class=\"temp\">Day - ${Math.round(day.temp.day / 10)}&#176;C</div>\n                    <div class=\"temp\">Night - ${Math.round(day.temp.night / 10)}&#176;C</div>\n                    <div class=\"temp\">Description - ${day.weather[0].description}</div>\n                </div>\n                `\n              } else if (idx < 7) {\n                otherDayForcast += ` \n                         <div class=\"weather-forecast-item\">\n                    <div class=\"day\">${moment(day.dt * 1000).format('dddd')}</div>\n                         <img src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\" alt=\"weather icon\" class=\"w-icon\"/>\n                         <div class=\"temp\">Day - ${Math.round(day.temp.day / 10)}&#176;C</div>\n                         <div class=\"temp\">Night - ${Math.round(day.temp.night / 10)}&#176;C</div>\n                         <div class=\"temp\">Description - ${day.weather[0].description}</div>\n                     </div>\n                   `\n              }\n            })\n            weatherForecastEl.innerHTML = otherDayForcast;\n          })\n      })\n  }\n  render() {\n    return (\n      <div className=\"App\" >\n        <Display weatherData={this.state.data} />\n        <Navbar changeWeather={this.changeWeather} changeRegion={this.change} />\n      </div>\n    )\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}